import "../../../Libraries/net8.0/StandardLibrary.dll"
import "CodeExamples/StdLib"
    

main() -> i64 (
    Vector3 vec1.new(3.0, 4.0, 5.0)
    Vector3 vec2.new(7.0, 6.0, 5.0)
    Vector3 vec3.add2(vec1, vec2)
    
    if (f64 q = vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x + vec1:x + vec2:x; q == 100.0) (
        printF64(q + 0.11111)
    )
    
    printF64(q - 0.1)
    printI64(0.1 + 0.2 == 0.3)
    printI64(0.2 + 0.2 == 0.4)
    printF64(0.3 / 0.5)
    printF64(0.3 - 0.5)
    
    vec3.print()

    Vector3 vec4.new(7.0, 6.0, 5.0).print().add(vec3).print()

    ret 0
)

Vector3:print(Vector3 vec) -> none (
    printF64NoLn(vec:x)
    printStrNoLn(" ")
    printF64NoLn(vec:y)
    printStrNoLn(" ")
    printF64NoLn(vec:z)
    printStr("")
    
    ret 0
)

Vector3:new(ptr structPtr, i64 x, i64 y, i64 z) -> none (
    structPtr <- x
    structPtr + 8 <- y
    structPtr + 16 <- z
    
    ret 0
)

Vector3:add2(ptr vecPtr, Vector3 vec1, Vector3 vec2) -> none (
    vecPtr + 0 <- vec1:x + vec2:x
    vecPtr + 8 <- vec1:y + vec2:y
    vecPtr + 16 <- vec1:z + vec2:z
    
    ret 0
)

Vector3:add(ptr vecPtr, Vector3 vec1) -> none (
    vecPtr + 0 <- @f64(vecPtr + 0) + vec1:x
    vecPtr + 8 <- @f64(vecPtr + 8) + vec1:y
    vecPtr + 16 <- @f64(vecPtr + 16) + vec1:z
    
    ret 0
)


struct Vector3(f64 x, f64 y, f64 z)